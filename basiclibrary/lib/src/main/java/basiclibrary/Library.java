/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package basiclibrary;

import java.util.*;

public class Library {
    public static void main(String[] args){
        roll(3);
        int [] x = {1,32,32,20,3,4,5};
        System.out.println(containsDuplicates(x));
        System.out.println(calculateAverage(x));
        int[][] weeklyMonthTemperatures = {
                {66, 64, 58, 65, 71, 57, 60},
                {57, 65, 65, 70, 72, 65, 51},
                {55, 54, 60, 53, 59, 57, 61},
                {65, 56, 55, 52, 55, 62, 57}
        };
        averageOfLowestArray(weeklyMonthTemperatures);
        System.out.println(octoberSeattleTemperatures(weeklyMonthTemperatures));
        List<String> votes = new ArrayList<>();
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Bush");
        votes.add("Shrub");
        votes.add("Hedge");
        votes.add("Shrub");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Bush");
        votes.add("Hedge");
        votes.add("Hedge");
        votes.add("Hedge");


        String winner = tally(votes);
        System.out.println(winner + " received the most votes!");
    }

    public static int[] roll(int n){
        int min = 1;
        int max = 6;
        //generate random values from 0-24
        int [] result = new int[n];
        for(int i = 0 ; i<n ; i++){
            int dice_roll = (int)Math.floor(Math.random()*(max-min+1)+min);
            result[i] = dice_roll ;
        }
        System.out.println(Arrays.toString(result));
        return result;
    }

    static boolean containsDuplicates(int [] arr){
        boolean result = false;
        for (int i = 0; i < arr.length; i++) {
            for (int j = i + 1 ; j < arr.length; j++) {
                if (arr[i]==(arr[j]))
                    result= true;

            }
        }
        return result;
    }

    static double calculateAverage(int [] arr){
        double sum =0;
        for (int i=0 ;i<arr.length ; i++){
            sum+=arr[i];
        }
        double average = sum/arr.length;
        return average;

    }

    static int[] averageOfLowestArray(int [][] arr){

        int [] minArray = arr[0];
        for (int i=0; i<arr.length ; i++){
            if( calculateAverage(arr[i]) <= calculateAverage(minArray))
                minArray = arr[i];
        }
        System.out.println(Arrays.toString(minArray));
        return minArray;
    }

    static String octoberSeattleTemperatures(int [][] arr){
        int min =arr[0][0];
        int max =arr[0][0];
        HashSet<Integer> temperatures = new HashSet<>();
        for(int i=0 ; i< arr.length ; i++){
            for(int j=0 ; j<arr[i].length;j++){
                temperatures.add(arr[i][j]);
               if(arr[i][j] < min )
                   min = arr[i][j];
               else if(arr[i][j]>max)
                   max = arr[i][j];
            }
        }
        System.out.println("High: "+ max);
        System.out.println("Low: "+ min);
        String tempsNotSeen = "Never saw temperature : ";
        for (int i = min ; i<=max ;i++){
            if(!temperatures.contains(i)){
                System.out.println("Never saw temperature: "+ i);
                tempsNotSeen+= " "+i;
            }
        }
        return tempsNotSeen;
    }

    public static String tally(List<String> inputList) {
        Map<String, Integer> resultMap = new HashMap<>();
        for (String element : inputList) {
            if (resultMap.containsKey(element)) {
                resultMap.put(element, resultMap.get(element) + 1);
            } else {
                resultMap.put(element, 1);
            }
        }
        String winner = "ahmed";
        Integer winningVotes = 0 ;
        for(Map.Entry<String,Integer> entry : resultMap.entrySet()){
            if(entry.getValue() > winningVotes){
                winningVotes = entry.getValue();
                winner = entry.getKey();
            }

        }
        return winner;
    }

}
